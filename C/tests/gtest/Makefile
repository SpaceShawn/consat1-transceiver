# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Where to find user code.
PROJECT_DIR = ../../../..
SPACE_LIB_DIR= $(PROJECT_DIR)/space-lib
USER_DIR = $(PROJECT_DIR)/HE100-lib/C
TIMER_DIR = $(PROJECT_DIR)/space-timer-lib
FLETCHER_DIR = $(PROJECT_DIR)/space-lib/checksum
SHAKES_DIR = $(PROJECT_DIR)/space-lib/shakespeare
UTLS_DIR= $(SPACE_LIB_DIR)/utls
SPACE_TIMER_DIR= $(PROJECT_DIR)/space-timer-lib
GLOBAL_INC_DIR= $(SPACE_LIB_DIR)/include

# Include paths
EXTERNINCPATH=-I$(USER_DIR)/inc/ -I$(GLOBAL_INC_DIR)/ -I$(UTLS_DIR)/include -I$(FLETCHER_DIR)/inc -I$(TIMER_DIR)/inc -I$(SHAKES_DIR)/inc
HEINCPATH=-I$(USER_DIR)/inc
PCINCPATH=-I$(USER_DIR)/inc/PC
Q6INCPATH=-I$(USER_DIR)/inc/Q6
ARCH_INCPATH=$(PCINCPATH)

# Headers
SHAKESPEARE_HEADERS=$(SPACE_LIB_DIR)/shakespeare/inc/shakespeare.h 
PC_HEADERS=$(USER_DIR)/inc/PC/he100.h
Q6_HEADERS=$(USER_DIR)/inc/Q6/he100.h
HEADERS=$(SPACE_TIMER_DIR)/inc/timer.h $(UTLS_DIR)/include/Date.h $(USER_DIR)/inc/SC_he100.h $(UTLS_DIR)/include/SC_serial.h $(GLOBAL_INC_DIR)/SpaceDecl.h
ARCH_HEADERS=$(PC_HEADERS)

OBJECTS=Date.o fletcher.o timer.o shakespeare.o SC_he100-translations.o SC_serial.o SC_he100.o

###########################

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = $(PROJECT_DIR)/gtest-1.7.0

LIBPATH=-L$(TIMER_DIR)/lib -L$(FLETCHER_DIR)/lib -L$(SHAKES_DIR)/lib -L$(UTLS_DIR)/lib -L/usr/lib/x86_64-linux-gnu/
LIBS=$(LIBPATH) -lcs1_utls -lrt -lssl -lcrypto
Q6LIBS=$(LIBPATH) -lcs1_utlsQ6 -lrt

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include

ENV_FLAGS = -DCS1_DEBUG # to enable debug messages

ARCH=PC # DEFAULT
MICROCC=microblazeel-xilinx-linux-gnu-gcc
MICROPP=microblazeel-xilinx-linux-gnu-g++

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = he100_lib_test he100_live_radio_test

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all : $(TESTS)

clean :
	rm -f $(TESTS) gtest.a gtest_main.a *.o

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

###########################

TARGETS=he100_lib_test he100_live_radio_test

Date.o : $(UTLS_DIR)/src/Date.cpp $(HEADERS) $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) -I$(UTLS_DIR)/include/ $(CXXFLAGS) -c $(UTLS_DIR)/src/Date.cpp

timer.o : $(TIMER_DIR)/src/timer.c $(HEADERS) $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) -I$(TIMER_DIR)/inc/ $(CXXFLAGS) -c $(TIMER_DIR)/src/timer.c

fletcher.o : $(FLETCHER_DIR)/src/fletcher.c $(HEADERS) $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(EXTERNINCPATH) $(CXXFLAGS) -c $(FLETCHER_DIR)/src/fletcher.c

shakespeare.o : $(SHAKES_DIR)/src/shakespeare.cpp $(HEADERS) $(SHAKESPEARE_HEADERS) $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) -I$(SHAKES_DIR)/inc/ $(EXTERNINCPATH) $(CXXFLAGS) -c $(SHAKES_DIR)/src/shakespeare.cpp

SC_he100-translations.o:
	$(CXX) $(CPP_FLAGS) $(DEBUGFLAGS) -c $(USER_DIR)/src/SC_he100-translations.c 

SC_serial.o:
	$(CXX) $(CPP_FLAGS) $(DEBUGFLAGS) -c $(EXTERNINCPATH) $(ARCH_INCPATH) $(HEINCPATH) $(UTLS_DIR)/src/SC_serial.cpp 

SC_he100.o : $(USER_DIR)/src/SC_he100.c $(ARCH_HEADERS) $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(EXTERNINCPATH) $(ARCH_INCPATH) $(CXXFLAGS) -c $(USER_DIR)/src/SC_he100.c $(ENV_FLAGS)

he100_lib_test.o : $(USER_DIR)/tests/gtest/he100_lib_test.cpp $(HEADERS) $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(EXTERNINCPATH) -c $(USER_DIR)/tests/gtest/he100_lib_test.cpp

he100_live_radio_test.o : $(USER_DIR)/tests/gtest/he100_live_radio_test.cpp $(HEADERS) $(GTEST_HEADERS) $(ARCH_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(ARCH_INCPATH) $(EXTERNINCPATH) -c $(USER_DIR)/tests/gtest/he100_live_radio_test.cpp

he100_lib_test : $(OBJECTS) he100_lib_test.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@$(ARCH) $(LIBS)
	
he100_live_radio_test : $(OBJECTS) he100_live_radio_test.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(EXTERNINCPATH) -lpthread $^ -o $@$(ARCH) $(LIBS)

buildQ6 : ARCH=Q6 
buildQ6 : CXX=$(MICROPP) 
buildQ6 : LIBS=$(Q6LIBS)
buildQ6 : ARCH_HEADERS=$(Q6_HEADERS)
buildQ6 : ARCH_INCPATH=$(Q6INCPATH)
buildQ6 : $(TARGETS) ;
	
buildBin : ARCH=PC
buildBin : ARCH_HEADERS=$(HE100_HEADERS)
buildBin : ARCH_INCPATH=$(PCINCPATH)
buildBin : $(TARGETS) ;

